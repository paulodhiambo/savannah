// Code generated by MockGen. DO NOT EDIT.
// Source: backend/internal/repositories (interfaces: CustomerRepositoryImpl)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backend/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepositoryImpl is a mock of CustomerRepositoryImpl interface.
type MockCustomerRepositoryImpl struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryImplMockRecorder
}

// MockCustomerRepositoryImplMockRecorder is the mock recorder for MockCustomerRepositoryImpl.
type MockCustomerRepositoryImplMockRecorder struct {
	mock *MockCustomerRepositoryImpl
}

// NewMockCustomerRepositoryImpl creates a new mock instance.
func NewMockCustomerRepositoryImpl(ctrl *gomock.Controller) *MockCustomerRepositoryImpl {
	mock := &MockCustomerRepositoryImpl{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepositoryImpl) EXPECT() *MockCustomerRepositoryImplMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepositoryImpl) Create(arg0 *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryImplMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepositoryImpl)(nil).Create), arg0)
}

// GetAll mocks base method.
func (m *MockCustomerRepositoryImpl) GetAll() ([]models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCustomerRepositoryImplMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCustomerRepositoryImpl)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockCustomerRepositoryImpl) GetByID(arg0 int) (*models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerRepositoryImplMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerRepositoryImpl)(nil).GetByID), arg0)
}

// Update mocks base method.
func (m *MockCustomerRepositoryImpl) Update(arg0 *models.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRepositoryImplMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRepositoryImpl)(nil).Update), arg0)
}
